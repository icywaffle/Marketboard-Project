Goals
    1. Find item of greatest profit w/100 items of high cash flow.
        In order to do this, we need to take the Lowest Price (P_total)
            The Lowest Price is the Selling Price.
            We need to crawl the prices of high cash flow.
                * We need to understand how to make a list of items.
                * We need to update this list.
                * We can manually update the list by copy pasting 100 items into an Array.
                    * Using this 100 items of array, we need to feed these 100 items to a crawler.
                    * The crawler will give us the Selling Price information
                    * The crawler must give this information at least once a day.
                    * Crawl once, forget the next until called again.
                    This crawler uses the Companion App API
        We also need to find the price of the individual materials (P_mats).
            * We need to understand whether or not the materials would give more profit than using them to make the full item
                * We need to know the materials composing the Items.
                    This requires the XIVAPI.
                    We need to search for one item, and then search for the materials of that.
                    * We need to understand the commands of this API.
                    * We need to store this information into a cache, Then re-request when called.
                        * When do we need to recall?
                    * We need to understand how to search a document, then grabs the important information.
        Then we can do a simple calculation.
            * P_total - P_mats = Profit
            * ( P_total - P_mats ) / P_total = % profit
            * Profit > P_mats. This is how you check if the materials make more profit being sold by themselves.
                ** We need to be able to know where these materials come from. More data.
                    Gatherable = ?
                    Timed Node = ? 
                    Book Locked = ?
                    If ungatherable. Remove one of the materials from P_mats.
                        We dont obtain any value from that material. We're forced to spend anyway.
    2. We need to know whether the market is stale or not.
        In order to do this, we need to know the amount of cash that is used for an item per week.
            -> The more cash per week, the more flow this item has.
            * The Crawler must crawl for this information as well. We need to know the purchase history.
    3. User Interaction
        I want to see which item gives me the most profit for the week.
        I don't want to make an item that will never sell.
        Cool. I know what item makes a profit.
        Now, how do I make that item? *Interaction Here.
        What is the trend of this profit? Was it higher yesterday?

Designing
    We can create a crawler later.
    For now, we can just use the data for 10 items and expand the code from there.
        For these 10 items, we can just use ffxivmb and copy from excel.


APIs
    1. XIVAPI
        /Recipe/(itemID)
            This gives the recipe for the item that is searched.
            How to find the item?
        /search?string=some+named+item
            This searches for the strings of related items. However, we still need to go through and find the ID of our item of request.
            In order to confirm the item that is requested, we need the user to confirm the item through this list.

YOU CAN BUILD IT BY PIECES. One function will work without another! This is good design because functions will be independent of one another.

functions
    1. Appending to string for the API
    2. Search Functions. We need to find specific information from the json.
    3. Calculating Functions. We need to calculate sums etc.
        Sum of P_mats
        P_total = Current Selling Price
    4. Current Selling Price function.
            Now, some people may sell for a terrible price by accident. We need to find the error function.
            Therefore, if someone sold an item at a threshold that's lower, we can ignore that price.
            But how big should the threshold be? Etc