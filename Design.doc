Goals
    1. Find item of greatest profit w/100 items of high cash flow.
        In order to do this, we need to take the Lowest Price (P_total)
            The Lowest Price is the Selling Price.
            We need to crawl the prices of high cash flow.
                    This crawler uses the Companion App API
        We also need to find the price of the individual materials (P_mats).
            * We need to understand whether or not the materials would give more profit than using them to make the full item
                * We need to know the materials composing the Items.
                    This requires the XIVAPI.
                    We need to search for one item, and then search for the materials of that.
                    * We need to understand the commands of this API.
                    * We need to store this information into a cache, Then re-request when called.
                        * When do we need to recall?
                    * We need to understand how to search a document, then grabs the important information.
        Then we can do a simple calculation.
            * P_total - P_mats = Profit
            * ( P_total - P_mats ) / P_total = % profit
            * Profit > P_mats. This is how you check if the materials make more profit being sold by themselves.
                ** We need to be able to know where these materials come from. More data.
                    Gatherable = ?
                    Timed Node = ? 
                    Book Locked = ?
                    If ungatherable. Remove one of the materials from P_mats.
                        We dont obtain any value from that material. We're forced to spend anyway.
    2. We need to know whether the market is stale or not.
        In order to do this, we need to know the amount of cash that is used for an item per week.
            -> The more cash per week, the more flow this item has.
            * The Crawler must crawl for this information as well. We need to know the purchase history.
    3. User Interaction
        I want to see which item gives me the most profit for the week.
        I don't want to make an item that will never sell.
        Cool. I know what item makes a profit.
        Now, how do I make that item? *Interaction Here.
        What is the trend of this profit? Was it higher yesterday?


APIs
    1. XIVAPI
        /Recipe/(itemID)
            This gives the recipe for the item that is searched.
            How to find the item?
        /search?string=some+named+item
            This searches for the strings of related items. However, we still need to go through and find the ID of our item of request.
            In order to confirm the item that is requested, we need the user to confirm the item through this list.

functions
    1. Cache Layering Get requests.
    2. Search Function: Allow user to search for an item (String Append again), using XIVAPI.
        Search Function.
        https://xivapi.com/search?string=eikon+mythrite&pretty=1&key=
        Append to the string= term, and change spaces to +.
            We want to search for an item.
            User must pick the right item.
            So we need to display the icon, and the name.
            Then we choose the item, not the recipe.
                The item will tell us the recipe ids.

    3. Calculating Functions. We need to calculate sums etc.
        Sum of P_mats
        P_total = Current Selling Price
    4. Current Selling Price function.
            Now, some people may sell for a terrible price by accident. We need to find the error function.
            Therefore, if someone sold an item at a threshold that's lower, we can ignore that price.
            But how big should the threshold be? Etc
    5. Crawl Requests to crawl whenever we check up on an item.
            Crawl requests need to be done at least once a day.
            If data is one day old, request again.
            We can keep the time data in the database.
Structure
// Current Status: Able to search, run, and obtain the Amount of ingredients, and ingredients of items
	// TODO: Add access to the array elements now that you have what you need.
	
	//
	// First -> We need to get all of the base ingredients of the full Recipe.
		/*
			Seeing Horde Axe
				High Mythrite Ingot -> Two lists
					Eikon Mythrite
					Lumythrite Ore
					Mythrite Ore
					Fire Cluster
					Earth Cluster
				Eikon Leather
				Eikon Iron Ingot
				Nidhogg's Scale
				Demicrystal
				Fire Cluster
				Earth Cluster
		*/
		

Database Design
    Using SQL
        All we need, is to keep the price history.
        item()
            There's twenty history prices.
                It has Price per item, Amount Sold, date sold.
            Check Prices   
                It has variable amount of stuff in the list.
                It has price per item, and amount selling.
        
        The best way to structure this might be

        itemHistory(iID,Price,Amount,DateSold,DateCrawled)
        itemCheck(iID,Price,Amount,DateCrawled)

        If DateNow - DateCrawled > 1 day, Recrawl the database.
        
    POWERFUL Now.
    https://xivapi.com/content

