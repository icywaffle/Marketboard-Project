Goals
    1. Find item of greatest profit w/100 items of high cash flow.
        In order to do this, we need to take the Lowest Price (P_total)
            The Lowest Price is the Selling Price.
            We need to crawl the prices of high cash flow.
                    This crawler uses the Companion App API
        We also need to find the price of the individual materials (P_mats).
            * We need to understand whether or not the materials would give more profit than using them to make the full item
                * We need to know the materials composing the Items.
                    This requires the XIVAPI.
                    We need to search for one item, and then search for the materials of that.
                    * We need to understand the commands of this API.
                    * We need to store this information into a cache, Then re-request when called.
                        * When do we need to recall?
                    * We need to understand how to search a document, then grabs the important information.
        Then we can do a simple calculation.
            * P_total - P_mats = Profit
            * ( P_total - P_mats ) / P_total = % profit
            * Profit > P_mats. This is how you check if the materials make more profit being sold by themselves.
                ** We need to be able to know where these materials come from. More data.
                    Gatherable = ?
                    Timed Node = ? 
                    Book Locked = ?
                    If ungatherable. Remove one of the materials from P_mats.
                        We dont obtain any value from that material. We're forced to spend anyway.
    2. We need to know whether the market is stale or not.
        In order to do this, we need to know the amount of cash that is used for an item per week.
            -> The more cash per week, the more flow this item has.
            * The Crawler must crawl for this information as well. We need to know the purchase history.
    3. User Interaction
        I want to see which item gives me the most profit for the week.
        I don't want to make an item that will never sell.
        Cool. I know what item makes a profit.
        Now, how do I make that item? *Interaction Here.
        What is the trend of this profit? Was it higher yesterday?
Structure
	// TODO: Add access to the array elements now that you have what you need.
	
	// Search for some item, you want to craft.
	// Next -> We need to get all of the base ingredients of the full Recipe.
		/*
			Seeing Horde Axe
				High Mythrite Ingot -> Two lists
					Eikon Mythrite
					Lumythrite Ore
					Mythrite Ore
					Fire Cluster
					Earth Cluster
				Eikon Leather
				Eikon Iron Ingot
				Nidhogg's Scale
				Demicrystal
				Fire Cluster
				Earth Cluster
		*/
        Once we have the first layer of materials information 
            We need to iterate through and search if they are base items or not.
            If this array
            type Link struct {
	            GameContentLinks struct {
		            Recipe struct {
		            	ItemResult []int `json:"ItemResult"`
		            } `json:"Recipe"`
	            } `json:"GameContentLinks"`
            }
            Is a null array, then we no longer have to check through.

        We need to think about how to store the information first.
            First iteration:
                Recipejsonconv.go
                Search for the recipe
                    [Name,ItemResultTargetID,RecipeID,Url,CraftTypeID]

                    Need to pair these three arrays together.
                    [AmountIngred0,1,2,3,4,5,6,7,8,9]
                    [ItemID0,1,2,3,4,5,6,7,8,9]
                    [IngredientRecipe0,1,2,3,4,5,6,7,8,9]
                    With elements
                        RecipeID
                        CraftTypeID
                        IngredientID
                        If null, then it's a base item. No more need to search
                            There may be multiple ingredient recipes for one. Just present all of them for the user choice.
                            Therefore, we have to go into the RecipeID and repeat.
                            -> Loop: 
                                Take the json into an array. (xivapi.GetRecipe(itemjson string))
                                Check IngredientRecipes (iterate through the Ingredient Recipe Array)
                                If there is a recipe, repeat. (if array element =/= null, repeat, else quit)
                                Else, we have the information we need. (Print out the current information: this will be used in parallel with the database)
                        
                    Each IngredientID and ItemResultTargetID will have a price in the database.
                    Todo this we need to learn data structures.
Database Design
    Using SQL
        All we need, is to keep the price history.
        item()
            There's twenty history prices.
                It has Price per item, Amount Sold, date sold.
            Check Prices   
                It has variable amount of stuff in the list.
                It has price per item, and amount selling.
        
        The best way to structure this might be

        itemHistory(iID,Price,Amount,DateSold,DateCrawled)
        itemCheck(iID,Price,Amount,DateCrawled)

        If DateNow - DateCrawled > 1 day, Recrawl the database.
        
    POWERFUL Now.
    https://xivapi.com/content

